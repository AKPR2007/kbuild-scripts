#!/usr/bin/env bash
# Copyright (C) 2020-2021 Oktapra Amtono
# Docker Kernel Build Script

# Cloning some resource
if [[ "$*" =~ "stable" ]]; then
  git clone --depth=1 https://github.com/okta-10/mystic_kernel_sdm732-4.14.git -b Mystic-4.14 kernel
elif [[ "$*" =~ "beta" ]]; then
  git clone --depth=1 https://"${TOKED}":x-oauth-basic@github.com/okta-10/mystic-beta.git -b Mystic-4.14 kernel
fi

cd kernel || exit
git clone --depth=1 https://github.com/kdrag0n/proton-clang.git clang
git clone --depth=1 https://github.com/fabianonline/telegram.sh Telegram
git clone --depth=1 https://github.com/okta-10/AnyKernel3.git -b surya ak3-surya

# Setup Environtment
KERNEL_DIR=$PWD
KERNEL_IMG=$KERNEL_DIR/out/arch/arm64/boot/Image.gz-dtb
KERNEL_DTBO=$KERNEL_DIR/out/arch/arm64/boot/dtbo.img
DEVICE="surya"
AK3_DIR=$KERNEL_DIR/ak3-"$DEVICE"/
export TZ="Asia/Jakarta"
ZIP_DATE=$(TZ=Asia/Jakarta date +'%d%m%Y')
SOURCE="$(git rev-parse --abbrev-ref HEAD)"
COMMIT=$(git log --pretty=format:'%s' -1)

# Kernel & Clang Setup
CLANG_DIR="$KERNEL_DIR/clang"
export PATH="$KERNEL_DIR/clang/bin:$PATH"
KBUILD_COMPILER_STRING="$("$CLANG_DIR"/bin/clang --version | head -n 1 | perl -pe 's/\(http.*?\)//gs' | sed -e 's/  */ /g')"

export ZIP_DATE
export SOURCE
export ARCH=arm64
export SUBARCH=arm64
export KBUILD_COMPILER_STRING
export KBUILD_BUILD_USER="okta_10"
export KBUILD_BUILD_HOST="dockerci"

# Telegram
TELEGRAM=Telegram/telegram
sendInfo() {
  "${TELEGRAM}" -c "${CHANNEL_ID}" -H -D \
      "$(
          for POST in "${@}"; do
              echo "${POST}"
          done
      )"
}

sendKernel() {
  "${TELEGRAM}" -f "$(echo "$AK3_DIR"/*.zip)" \
  -c "${CHANNEL_ID}" -H \
      "# <code>$DEVICE</code> # <code>md5: $(md5sum "$AK3_DIR"/*.zip | cut -d' ' -f1)</code> # <code>Build Took : $(("$DIFF" / 60)) Minute, $(("$DIFF" % 60)) Second</code>"
}

sendInfo  "<b>======================================</b>" \
          "<b>Start Building :</b> <code>Mystic Kernel</code>" \
          "<b>Source Branch :</b> <code>$SOURCE</code>" \
          "<b>======================================</b>"

# Start Count
BUILD_START=$(date +"%s")

make O=out vendor/mystic-"$DEVICE"_defconfig
# Start Compile
make -j"$(nproc --all)" O=out \
        CC=clang \
        CROSS_COMPILE=aarch64-linux-gnu- \
        CROSS_COMPILE_ARM32=arm-linux-gnueabi-

# If build error
if ! [ -a "$KERNEL_IMG" ]; then
  sendInfo "<b>Failed building kernel for <code>$DEVICE</code> Please fix it...!</b>"
  exit 1
fi

# End Count and Calculate Total Build Time
BUILD_END=$(date +"%s")
DIFF=$(( BUILD_END - BUILD_START ))

LINUX_VERSION=$(cat < out/.config | grep Linux/arm64 | cut -d " " -f3)

# Make zip
cp -r "$KERNEL_IMG" "$AK3_DIR"/
cp -r "$KERNEL_DTBO" "$AK3_DIR"/
cd "$AK3_DIR" || exit

if [[ "$*" =~ "stable" ]]; then
  zip -r9 Mystic-"$DEVICE"_"$ZIP_DATE".zip ./*
elif [[ "$*" =~ "beta" ]]; then
  zip -r9 Mystic-"$DEVICE"_beta_"$ZIP_DATE".zip ./*
fi

cd "$KERNEL_DIR" || exit

sendKernel
sendInfo  "<b>======================================</b>" \
          "<b>Success Building :</b> <code>Mystic Kernel</code>" \
          "<b>Linux Version :</b> <code>$LINUX_VERSION</code>" \
          "<b>Build Date :</b> <code>$(date +"%A, %d %b %Y, %H:%M:%S")</code>" \
          "<b>Toolchain :</b> <code>$("$CLANG_DIR"/bin/clang --version | head -n 1 | perl -pe 's/\(http.*?\)//gs' | sed -e 's/  */ /g' -e 's/[[:space:]]*$//')</code>" \
          "<b>Linker :</b> <code>$("$CLANG_DIR"/bin/ld.lld --version | head -n 1 | perl -pe 's/\(http.*?\)//gs' | sed -e 's/  */ /g' -e 's/[[:space:]]*$//')</code>" \
          "<b>Last Commit :</b> <code>$COMMIT</code>" \
          "<b>======================================</b>" \
          " " \
          "<b>Provide your feedback in the @MysticKernelDiscussion group for this Beta Build ðŸ˜‰</b>"
